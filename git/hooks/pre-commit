#!/bin/sh

# https://chatgpt.com/c/18230911-9003-42ad-9e3f-071c3310a148

# Maximum file size in bytes (10MB)
MAX_SIZE=$((10 * 1024 * 1024))

# List of file patterns to ignore (add your patterns here)
patterns="*.rda *.rda.* *.rds *.rds.* *.RData *.RData.* *.csv *.csv.* *.xls *.xls.* *.xlsx *.xlsx.*"

# Function to get file size
get_file_size() {
    filename="$1"
    if command -v stat > /dev/null 2>&1; then
        stat -c%s "$filename"  # stat is faster than wc, but may not be available on all systems
    else
        wc -c <"$filename"
    fi
}

# Initialize variables to store ignored files
ignored_files_due_to_size=""
ignored_files_due_to_pattern=""

# Find files matching the patterns or exceeding the size limit
git diff --cached --name-only | while read -r filename; do
    # read -r: The read command treats backslashes as literal characters, preventing them from being interpreted as escape sequences. This is generally the desired behavior when reading filenames.
    if [ -f "$filename" ]; then
        # filesize=$(wc -c <"$filename")  # stat is faster than wc, but may not be available on all systems
        # filesize=$(stat -c%s "$filename")  # stat is faster than wc, but may not be available on all systems
        filesize=$(get_file_size "$filename")
        if [ "$filesize" -ge "$MAX_SIZE" ]; then
            ignored_files_due_to_size="$ignored_files_due_to_size $filename"
        else
            for pattern in $patterns; do
                # if [[ "$filename" == $pattern ]]; then
                #     ignored_files_due_to_size="$ignored_files_due_to_size $filename" 
                # fi
                case "$filename" in
                    $pattern) ignored_files_due_to_pattern="$ignored_files_due_to_pattern $filename" ;;
                esac
            done
        fi
    fi
done


if [ -n "$ignored_files_due_to_size" ] || [ -n "$ignored_files_due_to_pattern" ]; then
    echo "Some files are ignored due to their size or pattern specified in pre-commit hooks. If you need, use the following commands:"

    if [ -n "$ignored_files_due_to_size" ]; then
        echo "Files ignored due to size:"
        for file in $ignored_files_due_to_size; do
            echo "git add \"$file\""
            echo "git commit -m \"Add and commit $file --no-verify\" --no-verify"
        done
    fi

    if [ -n "$ignored_files_due_to_pattern" ]; then
        echo "Files ignored due to pattern:"
        for file in $ignored_files_due_to_pattern; do
            echo "git add \"$file\""
            echo "git commit -m \"Add and commit $file --no-verify\" --no-verify"
        done
    fi

    exit 1
fi

# Allow the commit if no large files are found
exit 0

# Make the hook executable: Ensure the script is executable by running:
# chmod +x .git/hooks/pre-commit

# Force add and commit large files: If you need to commit a file larger than 10 MB, you can bypass (override) the hook by using the --no-verify option:
# git add path/to/largefile
# git commit -m "Add large file" --no-verify
